name: Android Build and Release

on:
  workflow_dispatch:
    inputs: {}

env:
 GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}



permissions:
 contents: write

jobs:
  build:
    name: Build APKs and publish Release
    runs-on: ubuntu-latest
    env:
      JAVA_HOME_21_X64: /usr/lib/jvm/java-21-openjdk-amd64
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper/
          key: gradle-cache-${{ runner.os }}-v1

      - name: Ensure Gradle wrapper version
        run: |
          ./gradlew --version || true
          # If you want to force wrapper update add a step to set distributionUrl in gradle/wrapper/gradle-wrapper.properties

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build Debug APK
        run: |
          # Set JVM max heap via GRADLE_OPTS to avoid shell/PowerShell parsing issues with -Porg.gradle.jvmargs
          GRADLE_OPTS="-Xmx3g" ./gradlew assembleDebug

      - name: Build Release APK
        run: |
          # Set JVM max heap via GRADLE_OPTS to avoid shell/PowerShell parsing issues with -Porg.gradle.jvmargs
          GRADLE_OPTS="-Xmx3g" ./gradlew assembleRelease

      - name: Prepare artifacts
        run: |
          mkdir -p release_artifacts
          # Paths from the repo
          DEBUG_APK=app/build/outputs/apk/debug/app-debug.apk
          RELEASE_APK=app/release/app-release.apk
          # Copy the same APK to ABI-labeled files. If your project generates ABI-specific APKs, replace these with the real files.
          if [ -f "$DEBUG_APK" ]; then
            cp "$DEBUG_APK" release_artifacts/app-debug-universe.apk
            cp "$DEBUG_APK" release_artifacts/app-debug-arm.apk
            cp "$DEBUG_APK" release_artifacts/app-debug-arm64.apk
          else
            echo "Debug APK not found at $DEBUG_APK" && ls -R app/build/outputs || exit 1
          fi

          if [ -f "$RELEASE_APK" ]; then
            cp "$RELEASE_APK" release_artifacts/app-release-universe.apk
            cp "$RELEASE_APK" release_artifacts/app-release-arm.apk
            cp "$RELEASE_APK" release_artifacts/app-release-arm64.apk
          else
            echo "Release APK not found at $RELEASE_APK" && ls -R app || exit 1
          fi

      - name: Create GitHub Release
  id: create_release
  env:
    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  run: |
    set -euo pipefail

    # 1) 获取版本号（优先：app/build.gradle -> app/build.gradle.kts -> gradle.properties）
    VERSION=""
    if [ -f app/build.gradle ]; then
      VERSION=$(grep -m1 "versionName" app/build.gradle | sed -E "s/.*versionName[[:space:]]+['\"]([^'\"]+)['\"].*/\1/" || true)
    fi
    if [ -z "$VERSION" ] && [ -f app/build.gradle.kts ]; then
      VERSION=$(grep -m1 "versionName" app/build.gradle.kts | sed -E "s/.*versionName\\s*=?\\s*\"([^\"]+)\".*/\1/" || true)
    fi
    if [ -z "$VERSION" ] && [ -f gradle.properties ]; then
      VERSION=$(grep -m1 -E "^(VERSION_NAME|versionName|VERSION)$" gradle.properties | cut -d'=' -f2- | tr -d '[:space:]' || true)
    fi
    VERSION=${VERSION:-"build-${GITHUB_RUN_ID}"}

    # 2) commit id（短 sha）和 commit history 作为 body
    COMMIT_ID=$(git rev-parse --short HEAD)
    BODY=$(git log --pretty=format:"%h %ad - %s (%an)" --date=short --no-merges -n 200)

    # 3) 构造 JSON payload（使用 jq 确保正确的 JSON 转义）
    if ! command -v jq >/dev/null 2>&1; then
      echo "jq is required but not installed in runner. Exiting."
      exit 1
    fi
    PAYLOAD=$(jq -n --arg tag "${COMMIT_ID}" --arg name "${VERSION}" --arg body "${BODY}" \
      '{ tag_name: $tag, name: $name, body: $body, draft: false, prerelease: false }')

    # 4) 调用 GitHub Releases API 创建 release（创建时为最新）
    RESPONSE=$(curl -s -X POST \
      -H "Authorization: token ${GITHUB_TOKEN}" \
      -H "Accept: application/vnd.github+json" \
      -H "Content-Type: application/json" \
      -d "${PAYLOAD}" \
      "https://api.github.com/repos/${GITHUB_REPOSITORY}/releases")

    # 输出响应以便日志可见
    echo "GitHub release response:"
    echo "${RESPONSE}" | jq .

    # 5) 从响应中取 upload_url 并导出为步骤输出，供后续 upload-release-asset 使用
    UPLOAD_URL=$(echo "${RESPONSE}" | jq -r .upload_url // empty)
    if [ -z "$UPLOAD_URL" ] || [ "$UPLOAD_URL" = "null" ]; then
      echo "Failed to create release or upload_url missing. Full response above."
      exit 1
    fi
    echo "upload_url=${UPLOAD_URL}" >> "$GITHUB_OUTPUT"

      - name: Skip turnstyle (not required)
        run: echo "Skipping turnstyle wrapper; uploading directly using upload-release-asset"

      - name: Upload APKs to release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release_artifacts/app-debug-arm.apk
          asset_name: app-debug-arm.apk
          asset_content_type: application/vnd.android.package-archive

      - name: Upload APKs to release (arm64)
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release_artifacts/app-debug-arm64.apk
          asset_name: app-debug-arm64.apk
          asset_content_type: application/vnd.android.package-archive

      - name: Upload APKs to release (universe debug)
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release_artifacts/app-debug-universe.apk
          asset_name: app-debug-universe.apk
          asset_content_type: application/vnd.android.package-archive

      - name: Upload Release APKs (arm)
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release_artifacts/app-release-arm.apk
          asset_name: app-release-arm.apk
          asset_content_type: application/vnd.android.package-archive

      - name: Upload Release APKs (arm64)
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release_artifacts/app-release-arm64.apk
          asset_name: app-release-arm64.apk
          asset_content_type: application/vnd.android.package-archive

      - name: Upload Release APKs (universe)
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release_artifacts/app-release-universe.apk
          asset_name: app-release-universe.apk
          asset_content_type: application/vnd.android.package-archive
